// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  username    String
  password    String
  submissions Submission[]
}

model Admin {
  id     Int     @id @default(autoincrement())
  name   String
  email  String  @unique
  tracks Track[]
}

model Track {
  id          String          @id @default(uuid())
  title       String
  description String
  image       String
  problems    TrackProblems[]
  hidden      Boolean         @default(false)
  createdAt   DateTime        @default(now())
  adminId     Int
  admin       Admin           @relation(fields: [adminId], references: [id])
}

model Problem {
  id            String          @id @default(uuid())
  title         String
  description   String
  notionDocId   String
  mcqQuestions  MCQQuestion[]
  type          ProblemType
  trackProblems TrackProblems[]
  testCases     TestCase[]
  submissions   Submission[]
}

model TestCase {
  id             String  @id @default(uuid())
  input          String
  expectedOutput String
  problemId      String
  problem        Problem @relation(fields: [problemId], references: [id])
}

model Submission {
  id        String             @id @default(uuid())
  code      String
  language  Language
  problemId String
  problem   Problem            @relation(fields: [problemId], references: [id])
  userId    String
  user      User               @relation(fields: [userId], references: [id])
  results   SubmissionResult[]
}

enum Language {
  CPP
  JAVASCRIPT
}

model SubmissionResult {
  id           String     @id @default(uuid())
  submissionId String
  submission   Submission @relation(fields: [submissionId], references: [id])
  passed       Boolean
}

model TrackProblems {
  track   Track  @relation(fields: [trackId], references: [id])
  trackId String

  problem   Problem @relation(fields: [problemId], references: [id])
  problemId String

  @@id([trackId, problemId])
}

enum ProblemType {
  Blog
  Code
  MCQ
}
model MCQQuestion {
  id            String   @id @default(uuid())
  question      String
  options       String[]
  correctOption String
  problem       Problem  @relation(fields: [problemId], references: [id])
  problemId     String
}
